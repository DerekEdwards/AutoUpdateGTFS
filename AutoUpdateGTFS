#!/bin/bash

#This script assumes that:
# java has already been added to the path and that it is accessible and has sufficient permissions to run OpenTripPlanner.

############################################################
## Default Setup Instructions
############################################################

# 1 - Create the following directories and make sure that permissions allow for writing
# /var/otp/auto-update-gtfs/bin
# /var/otp/auto-update-gtfs/data
# /var/otp/graphs/<your graph folder name>
# /var/otp/auto-update-gtfs/gtfs_current
# /var/otp/auto-update-gtfs/var/otp/gtfs_new
# /var/otp/auto-update-gtfs/var/otp/osm_current
# /var/otp/auto-update-gtfs/var/otp/osm_new

# 2 - Put your Jar File in /var/otp/auto-update-gtfs/bin

# 3 - Put your gtfs excel file in /var/otp/auto-update-gtfs/bin
# There should be two columns (Name,URL) Note: only URL is used, the name simply for reference

# 4 - Put your OSM excel file in /var/otp/auto-update-gtfs/bin
# There should be two columns (Name,URL) Note: only URL is used, the name simply for reference

# 5 - Update the default config.csv file and place it in /var/otp/auto-update-gtfs/bin

############################################################
## Advanced Configs
############################################################
##### Update this Version on Each Release ######
version=1.2
echo "Running version: "$version

#Config File: Sets basic configurations (e.g., GTFS Excel file name, OSM Excel file name, OTP Graph Directory, OtpJar Name, Email Address etc.
configFile=/var/otp/auto-update-gtfs/config.csv
#This should be set to the the local directory where new GTFS data is stored
newGtfsDataDir=/var/otp/auto-update-gtfs/gtfs_new/
#This should be set to the local directory where the Currently used GTFS data is stored
currentGtfsDataDir=/var/otp/auto-update-gtfs/gtfs_current/
#New Osm Directory
newOsmDataDir=/var/otp/auto-update-gtfs/osm_new/
#Current Osm Directory
currentOsmDataDir=/var/otp/auto-update-gtfs/osm_current/
#This is the folder that combines the GTFS and OSM.  The graph is built from this folder
buildDataDir=/var/otp/auto-update-gtfs/data/
#This should be the filename of the graph object. This is always Graph.obj when OTP builds it.
graphFileName=Graph.obj
#This should be the directory of the OpenTripPlanner jar that is serving the instance of OTP on this server
otpJarDirectory=/var/otp/auto-update-gtfs/bin/
#This should be the parameters used when invoking the OpenTripPlanner test new GTFS data
invokeJavaCommand="java -Xmx8G -jar"
#Location of the Transformation Library
extensionJar=/var/otp/auto-update-gtfs/bin/onebusaway-gtfs-transformer-cli-1.3.43.jar

###########################################################
## Read in Configs
##########################################################
echo "Starting at";  date
echo "Reading Configs of GTFS locations"
idx=0
while IFS="," read key value
do
  idx=$((idx+1))
  if [ "$idx" -eq "1" ] ; then
    gtfsExcelFile=$value
    echo "GTFS Excel File: "$value
  fi
  if [ "$idx" -eq "2" ] ; then 
    osmExcelFile=$value
    echo "OSM Excel File: "$value
  fi
  if [ "$idx" -eq "3" ] ; then 
    otpGraphDire=$value
    echo "OTP Graph Dir: "$value
  fi
  if [ "$idx" -eq "4" ] ; then 
    otpJar=$value
    echo "OTP Jar File: "$value
  fi
  if [ "$idx" -eq "5" ] ; then 
    emailDistributionList=$value
    echo "Email Distribution List: "$value
  fi
  if [ "$idx" -eq "6" ] ; then 
    serverName=$value
    echo "Server Name: "$value
  fi
  if [ "$idx" -eq "7" ] ; then 
    sendEmail=$value
    echo "Send Emails on Success or Failure: "$value
  fi
  if [ "$idx" -eq "8" ] ; then 
    verboseEmail=$value
    echo "Send Email Every Time AutoUpdateGTFS Runs: "$value
  fi
done < $configFile

############################################################
## Pre Clean-Up
############################################################

echo "Cleaning Up"

#Delete everything in the New GTFS Folder
rm -rf $newGtfsDataDir*

#Delete everything in the new OSM Folder
rm -rf $newOsmDataDir*

#Get rid of the old gtfs temp file if it exists
tempFile=$otpJarDirectory"temp.csv"
if [ -f $tempFile ] ; then
    rm $tempFile
fi

#Get rid of the old OSM temp file if it exists
osmTempFile=$otpJarDirectory"osm_temp.csv"
if [ -f $osmTempFile ] ; then
    rm $osmTempFile
fi

############################################################
## Download GTFS
############################################################
echo "Reading CSV of GTFS locations"
while IFS="," read Name URL
do
  echo $Name
  echo $URL
  echo $newGtfsDataDir$name.zip
  echo -----------------
  wget $URL -O $newGtfsDataDir$Name.zip
done < $gtfsExcelFile

#Count the files in the directory to confirm all the GTFS downloaded
gtfsCount=$(ls $newGtfsDataDir | wc -l)
expectedGtfsCount=$(wc -l $gtfsExcelFile | awk '{print $1}')

# TEST 1: If expected number of GTFS files is different than what was downloaded.  Error!
if [ "$gtfsCount" -ne "$expectedGtfsCount" ] ; then
    echo "Error downloading some GTFS. The expected number of GTFS files differs from what was expected."
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Error downloading some GTFS. The expected number of GTFS files differs from what was expected." | mail -s "$serverName Build Error" $emailDistributionList
    fi
    #TODO: Make this error more specific.  Which file didn't download?
    exit 0
fi

# TEST 2: If more than one file type was downloaded.  Error!
fileTypeCount=$(file $newGtfsDataDir* | awk '{print $2}' | sort | uniq | wc -l)
expectedFileTypeCount=1
echo "Downloaded the following number of GTFS file types (should always be 1)"
echo $fileTypeCount
if [ "$fileTypeCount" -ne "$expectedFileTypeCount" ]
then
    echo "Error downloading some GTFS.  One of the files is not a Zip file."
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Error downloading some GTFS.  One of the files is not a Zip file." | mail -s "$serverName Build Error" $emailDistributionList
    fi
    exit 0
fi

# TEST 3: If that one file time is anything other than Zip.  Error!
fileType=$(file $newGtfsDataDir* | awk '{print $2}' | uniq)

echo "Downloaded the following file types"
echo $fileType
if [ "$fileType" != "Zip" ]
then
    echo "Error downloading some GTFS.  The GTFS is not a Zip file."
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Error downloading some GTFS.  The GTFS is not Zip file." | mail -s "$serverName Build Error" $emailDistributionList
    fi
    exit 0
fi

# TEST 4: Check to see  if the new GTFS is different than the current GTFS
gtfsDiffResult=$(diff $newGtfsDataDir $currentGtfsDataDir)
if [ ! "$gtfsDiffResult" ]; then #this is the mac stat. Redhat might want a different format
    echo "The GTFS has not been updated. No need to rebuild."
    if [ "$verboseEmail" -eq "1" ] ; then
        echo "No new GTFS to Download. No action needed at this time. Stop this email by setting verboseEmail=0" | mail -s "$serverName No New GTFS" $emailDistributionList
    fi
    exit 0
fi

#Delete everything in the build folder
rm -rf $buildDataDir*

echo "Copying new gtfs to the build folder"
cp $newGtfsDataDir* $buildDataDir

############################################################
## Extend the Expiration of all GTFS Files
############################################################

FILES=$buildDataDir'*.zip'
for f in $FILES
do
  echo "Extending the dates of "$f
  java -jar $extensionJar --transform='{"op":"calendar_extension", "end_date":"20201231"}' $f $buildDataDir'EXTENDED'$(basename $f)
  echo "Deleting"$f
  rm $f
done

############################################################
## Download OSM Map (this only runs if we have new GTFS)
############################################################
echo "Reading CSV of OSM locations"
##Go through the osmExcelFile and remove the names column.
while IFS="," read Name URL
do
    echo $URL >> $osmTempFile
done < $osmExcelFile
wget -i $osmTempFile -P $newOsmDataDir

#Count the files in the directory to confirm all the OSM Maps downloaded
osmCount=$(ls $newOsmDataDir | wc -l)
expectedOsmCount=$(wc -l $osmExcelFile | awk '{print $1}')

# TEST 1: If expected number of OSM files is different than what was downloaded.  Error!
if [ "$osmCount" -ne "$expectedOsmCount" ] ; then
    echo "Error downloading some OSM"
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Error downloading some OSM" | mail -s "$serverName Build Error" $emailDistributionList
    fi
    #TODO: Improve error message to be more helpful
    exit 0
fi

# TEST 2: If more than one file type was downloaded.  Error!
fileTypeCount=$(file $newOsmDataDir* | awk '{print $2}' | sort | uniq | wc -l)
expectedFileTypeCount=1
echo "Downloaded the following number of OSM file types (should always be 1)"
echo $fileTypeCount
if [ "$fileTypeCount" -ne "$expectedFileTypeCount" ]
then
    echo "Error downloading some OSM files.  One of the files is not a data file."
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Error downloading some OSM files.  One of the files is not a data file." | mail -s "$serverName Build Error" $emailDistributionList
    fi
    exit 0
fi

echo "Copying new OSM to the Build folder"
cp $newOsmDataDir* $buildDataDir

############################################################
## Build & Test the Graph
############################################################
echo "Building the new Graph.obj"
$invokeJavaCommand $otpJarDirectory$otpJar "--build" $buildDataDir

# Confirm that a graph was actually written
if [ ! -f $buildDataDir$graphFileName ]; then
    echo "No Graph was written"
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Graph Building Failed. No Graph was written." | mail -s "$serverName Build Error" $emailDistributionList
    fi
    exit 0
fi


# Get the graph size
graphSize=$(ls -l $buildDataDir$graphFileName | awk '{print $5}')
#If the graph is small, then it's not fully built.  This thing failed.
minSize=10
if [ $graphSize -lt $minSize ]; then
    echo "Failed Building Graph"
    if [ "$sendEmail" -eq "1" ] ; then
        echo "Graph Building Failed" | mail -s "$serverName Build Error" $emailDistributionList
    fi
    exit 0
fi

############################################################
## SUCCESS! Clean-up, Upload Graph, and Restart OTP
############################################################
# Move the new GTFS to the current GTFS folder
rm -rf $currentGtfsDataDir*
cp $newGtfsDataDir* $currentGtfsDataDir

# Move the new OSM to the current OSM folder
rm -rf $currentOsmDataDir*
cp $newOsmDataDir* $currentOsmDataDir

# If there is Graph currently in production, move it to Graph.obj.old
if [ -f $otpGraphDir$graphFileName ] ; then
  cp $otpGraphDir$graphFileName $otpGraphDir$graphFileName.old
fi

#Move the new Graph to the production location
cp $buildDataDir$graphFileName $otpGraphDir$graphFileName

#Check to see  if the new Graph was successfully moved
diffResult=$(diff $buildDataDir$graphFileName $otpGraphDir$graphFileName)
if [ "$diffResult" ]; then
  echo "The Graph.obj has not been moved into production."
    if [ "$sendEmail" -eq "1" ] ; then
      echo "Graph.obj built, but Graph.obj couldn't be moved to the production location." | mail -s "$serverName Build Error" $emailDistributionList
    fi
  exit 0
fi

#TODO: Have an option to Restart OTP Automatically. There will be two hew variables 1) restartAutomatically 2) commandToRestart.  If #1 is true, execture #2
echo "Success! Restart the server to start using the new Graph.obj"
if [ "$sendEmail" -eq "1" ] ; then
  echo "A new graph was successfully built. If you have your server set to autoReload, then you are finished.  Otherwise, you will need to restart OTP for this new graph to take effect. What changed: "$gtfsDiffResult | mail -s "$serverName Build Success" $emailDistributionList
fi
